#include <stdio.h>
struct Process {
    int pid;        
    int arrival;    
    int burst;      
    int waiting;    
    int turnaround; 
};
void findWaitingTime(struct Process p[], int n) {
    p[0].waiting = 0; 
    for (int i = 1; i < n; i++) 
{
p[i].waiting = p[i - 1].waiting + p[i - 1].burst;
}
}
void findTurnaroundTime(struct Process p[], int n) {
for (int i = 0; i < n; i++) {
p[i].turnaround = p[i].waiting + p[i].burst;
}
}
void findAverageTime(struct Process p[], int n) {
    int total_waiting = 0, total_turnaround = 0;
findWaitingTime(p, n);
findTurnaroundTime(p, n);
printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
for (int i = 0; i < n; i++) {
printf("%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrival, p[i].burst, p[i].waiting, p[i].turnaround);
total_waiting += p[i].waiting;
total_turnaround += p[i].turnaround;
}
printf("\nAverage Waiting Time: %.2f", (float)total_waiting / n);
printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround / n);
}
int main() {
int n;
printf("Enter the number of processes: ");
scanf("%d", &n);
struct Process p[n];
printf("Enter arrival time and burst time for each process:\n");
for (int i = 0; i < n; i++) {
p[i].pid = i + 1;
printf("Process %d: ", i + 1);
scanf("%d %d", &p[i].arrival, &p[i].burst);
}
findAverageTime(p, n);
return 0;
}
